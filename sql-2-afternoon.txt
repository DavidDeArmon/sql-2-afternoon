//PRACTICE JOINS
1.
SELECT * FROM invoiceline
WHERE unitprice> .99

2.
SELECT i.invoicedate, c.firstname, c.lastname, i.total FROM customer c
JOIN invoice i ON c.customerid = i.customerid

3.
SELECT c.firstname, c.lastname, e.firstname, e.lastname FROM customer c
JOIN employee e ON e.employeeid = c.supportrepid;

4.
SELECT al.title, ar.name FROM album al
JOIN artist ar ON ar.artistId = al.artistid

5.
SELECT pt.trackid FROM playlisttrack pt
JOIN playlist p ON p.playlistid = pt.playlistid
WHERE p.name = "Music"

6.
SELECT t.name FROM track t
JOIN playlisttrack pt ON t.trackid = pt.trackid
WHERE pt.playlistid = 5

7.
SELECT t.name, pl.name FROM track t 
JOIN playlisttrack pt ON t.trackid = pt.trackid 
JOIN playlist pl ON pt.playlistid = pl.playlistid 

8.
SELECT t.name, al.title FROM track t
JOIN album al ON t.albumid = al.albumid
JOIN genre g ON g.genreid = t.genreid
WHERE g.name = "Alternative"


//PRACTICE NESTED QUERIES
1.
SELECT * FROM invoiceline
WHERE unitprice >.99

2.
SELECT * FROM playlisttrack
WHERE playlistid IN(SELECT playlistid FROM playlist WHERE name = "Music")

3.
SELECT name FROM track
WHERE trackid IN (SELECT trackid FROM playlisttrack WHERE playlistid = 5)

4.
SELECT * FROM track
WHERE genreid IN (SELECT genreid FROM genre WHERE name = "Comedy")

5.
SELECT * FROM track
WHERE albumid IN (SELECT albumid FROM album WHERE name = "Fireball")

6.
SELECT * FROM track
WHERE albumid IN
(SELECT albumID FROM album
 WHERE artistid IN (SELECT artistid FROM artist WHERE name = "Queen"))

//PRACTICE UPDATING ROWS
1.
UPDATE customer
SET fax = null
WHERE fax IS not null

2.
UPDATE customer
SET company = "self"
WHERE company IS null

3.
UPDATE customer
SET lastname = "Thompson"
WHERE firstname = "Julia" AND lastname = "Barnett"

4.
UPDATE customer
SET supportrepid = 4
WHERE email ="luisrojas@yahoo.cl" 

5.
UPDATE track
SET composer = "The darkness is around us"
WHERE composer IS null AND genreid IN(SELECT genreid FROM genre WHERE name = "Metal") 

//GROUP BY
1.
SELECT genre.name, count(track.genreid) FROM track
JOIN genre ON track.genreid = genre.genreid
GROUP BY genre.name

2.
SELECT g.name, COUNT(t.genreid) FROM track t
JOIN genre g ON t.genreid = g.genreid
WHERE g.name = "Pop" OR g.name = "Rock"
GROUP BY g.name

3.
SELECT ar.name ,COUNT(al.albumid) FROM artist ar
JOIN album al ON ar.artistid = al.artistid
GROUP BY ar.name

//USE DISTINCT
1.
SELECT DISTINCT composer FROM track

2.
SELECT DISTINCT billingpostalcode FROM invoice

3.
SELECT DISTINCT company FROM customer

//DELETE ROWS
1.
DELETE FROM practice_delete
WHERE type = "bronze"

2.
DELETE FROM practice_delete
WHERE type = "silver"

3.
DELETE FROM practice_delete
WHERE value = 150

//ECOMMERCE SIMULATION

CREATE TABLE Users(
  user_id INTEGER PRIMARY KEY,
  name VARCHAR(300),
  email VARCHAR(400)
  );
CREATE TABLE Products(
  product_id INTEGER PRIMARY KEY,
  name VARCHAR(300),
  price INTEGER
  );
CREATE TABLE Orders(
  order_id INTEGER PRIMARY KEY,
  product_id INTEGER
  );
INSERT INTO users(user_id, name, email)
VALUES(2,"Tom", "tt@gmail.com"),
(3,"Jennifer", "jj@gmail.com")

INSERT INTO products(product_id, name, price)
VALUES(1,"Books", 10),
(3,"DVD", 20),
(2,"Record",40)

INSERT INTO orders(order_id, product_id)
VALUES(1, 1),
(3, 2),
(2,3),
(4,1),
(5,1),
(6,2),
(7,3),
(8,3),
(9,3)

SELECT * FROM products
WHERE product_id IN(SELECT product_id FROM orders WHERE order_id =1)

SELECT * FROM orders


SELECT SUM(p.price) FROM products p
JOIN orders o ON p.product_id = o.product_id
WHERE o.order_id = 2

ALTER TABLE orders ADD COLUMN user_id REFERENCES "users"(user_id)

SELECT user_id, COUNT(order_id) FROM orders
GROUP BY user_id